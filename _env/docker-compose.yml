services:

#    dns:
#        build:
#            context: ${CONTAINER_DIR}/dns
#            args:
#                - bind_version=${BIND_VERSION}
#        command: ./start.sh
#        ports:
#            - 53:53

    jekyll:
        build:
            context: ${CONTAINER_DIR}/jekyll
            args:
                - jekyll_version=${JEKYLL_VERSION}
        command: jekyll build --watch
        volumes:
            - ../:/srv/jekyll:ro
            - www:/srv/jekyll/_site:rw

    jekyll-dev:
        build:
            context: ${CONTAINER_DIR}/jekyll
            args:
                - jekyll_version=${JEKYLL_VERSION}
        command: jekyll build --drafts --watch
        volumes:
            - ../:/srv/jekyll:ro
            - www-dev:/srv/jekyll/_site:rw

    nginx-http:
        build:
            context: ${CONTAINER_DIR}/nginx-http
            args:
                - nginx_version=${NGINX_VERSION}
        command:
            -stdout /var/log/nginx/access.log
            -stderr /var/log/nginx/error.log
            ./start.sh
        ports:
            - 80:80
            - 8080:8080
        volumes:
            - acme-challenge:/usr/share/nginx/letsencrypt/.well-known/acme-challenge:ro
            - www-dev:/usr/share/nginx/html:ro
            - ${CONTAINER_DIR}/nginx-http/sites-enabled:/etc/nginx/sites-enabled/:ro
            - ${CONTAINER_DIR}/nginx-http/htpasswd:/etc/nginx/.htpasswd:ro
        networks:
            backbone:
                aliases:
                    - nginx-http

    nginx-https:
        depends_on:
            - isso
        build:
            context: ${CONTAINER_DIR}/nginx-https
            args:
                - nginx_version=${NGINX_VERSION}
        environment:
            - CRYPTPAD_HTPASSWD_PASSWORD=${CRYPTPAD_HTPASSWD_PASSWORD}
        command:
            -wait file:///certs/duckpond.ch/cert.pem
            -wait file:///certs/duckpond.ch/privkey.pem
            -wait file:///certs/duckpond.ch/fullchain.pem
            -template /tmpl/etc/nginx/sites-enabled/:/etc/nginx/sites-enabled/
            -template /tmpl/etc/nginx/conf.d:/etc/nginx/conf.d
            -timeout ${DOCKERIZE_TIMEOUT}
            -stdout /var/log/nginx/access.log
            -stderr /var/log/nginx/error.log
            ./start.sh
        ports:
            - 443:443
        volumes:
            - certs:/certs/:ro
            - www:/usr/share/nginx/html:ro
            - ${CONTAINER_DIR}/nginx-https/sites-enabled:/tmpl/etc/nginx/sites-enabled/:ro
            - ${CONTAINER_DIR}/nginx-https/conf.d:/tmpl/etc/nginx/conf.d:ro
        volumes_from:
            - cryptpad:ro
        networks:
            backbone:
                aliases:
                    - duckpond.ch
                    - nginx-https

    letsencrypt:
        depends_on:
            - nginx-http
        build:
            context: ${CONTAINER_DIR}/dehydrated
            args:
                - docker_version=${DOCKER_VERSION}
                - dehydrated_version=${DEHYDRATED_VERSION}
        environment:
            - LETS_ENCRYPT_SLEEP_TIME=${LETS_ENCRYPT_SLEEP_TIME}
        command: ./start.sh
        volumes:
            - /var/run/docker.sock:/var/run/docker.sock
            - ${CONTAINER_DIR}/dehydrated/etc:/etc/dehydrated:ro

            - certs:/rw/certs:rw
            - ${CONTAINER_DIR}/mailcow/data/assets/ssl:/rw/certs_mailcow:rw
            - acme-challenge:/rw/acme-challenge:rw
            - letsencrypt-accounts:/rw/accounts:rw

    isso:
        build:
            context: ${CONTAINER_DIR}/isso
            args:
                - isso_version=${ISSO_VERSION}
        command:
            -wait tcp://nginx-https:443
            -timeout ${DOCKERIZE_TIMEOUT}
            ./start.sh
        volumes:
            - ${CONTAINER_DIR}/isso/config:/config:ro

            - isso-db:/rw/db:rw
        networks:
            backbone:
                aliases:
                    - blog-isso

    challenges:
        build:
            context: ${CONTAINER_DIR}/challenges
            args:
                - python_version=${PYTHON_VERSION}
        ports:
            - 8888:8888
            - 8889:8889

    #cryptpad:
    #    build:
    #        context: ${CONTAINER_DIR}/cryptpad
    #        args:
    #            - nodejs_version=${NODEJS_VERSION}
    #            - cryptpad_archive=${CRYPTPAD_ARCHIVE}
    #            - cryptpad_version=${CRYPTPAD_VERSION}
    #            - cryptpad_htpasswd_user=${CRYPTPAD_HTPASSWD_USER}
    #            - cryptpad_htpasswd_password=${CRYPTPAD_HTPASSWD_PASSWORD}
    #    command: ./start.sh
    #    volumes:
    #        - ${CONTAINER_DIR}/cryptpad/customize/:/cryptpad/customize:ro
    #        - ${CONTAINER_DIR}/cryptpad/config/:/cryptpad/config:ro

    #        - cryptpad-blob:/cryptpad/blob:rw
    #        - cryptpad-block:/cryptpad/block:rw
    #        - cryptpad-data:/cryptpad/data:rw
    #        - cryptpad-datastore:/cryptpad/datastore:rw
    #    networks:
    #        backbone:
    #            aliases:
    #                - cryptpad
    #    ulimits:
    #        nofile:
    #          soft: 1000000
    #          hard: 1000000

    syncthing:
        build:
            context: ${CONTAINER_DIR}/syncthing
            args:
                - syncthing_version=${SYNCTHING_VERSION}
        command: ./start.sh
        ports:
            - 22000:22000
            - 21027:21027/udp
        volumes:
            - syncthing-config:/rw/syncthing:rw
            #
            # Sync Folders
            #
            - volume-backup:/service/volume-backup:${VOLUME_SYNC_MOUNT}
            - backup:/service/backup:rw
        networks:
            backbone:
                aliases:
                    - syncthing

    volume-sync:
        build:
            context: ${CONTAINER_DIR}/volume-sync
            args:
                - borgbackup_version=${BORGBACKUP_VERSION}
                - borgbackup_repo=${BORG_REPO}
                - borgbackup_volumes=${BORG_VOLUMES}
        environment:
            - BORG_INITIAL_SLEEP=${BORG_INITIAL_SLEEP}
            - BORG_PASSPHRASE=${BORG_PASSPHRASE}
            - BORG_REPO=${BORG_REPO}
            - BORG_VOLUMES=${BORG_VOLUMES}
            - VOLUME_SYNC_SLEEP_TIME=${VOLUME_SYNC_SLEEP_TIME}
        command: ./start.sh
        volumes:
            - /var/run/docker.sock:/var/run/docker.sock
            - volume-backup:${BORG_REPO}:rw
            #
            # Backup Folders
            #
            - ${HOST_DATA_DIR}:${BORG_VOLUMES}/host-data:${VOLUME_SYNC_MOUNT}

            - certs:${BORG_VOLUMES}/certs:${VOLUME_SYNC_MOUNT}
            - letsencrypt-accounts:${BORG_VOLUMES}/letsencrypt-accounts:${VOLUME_SYNC_MOUNT}
            - isso-db:${BORG_VOLUMES}/isso-db:${VOLUME_SYNC_MOUNT}
            - cryptpad-blob:${BORG_VOLUMES}/cryptpad-blob:${VOLUME_SYNC_MOUNT}
            - cryptpad-block:${BORG_VOLUMES}/cryptpad-block:${VOLUME_SYNC_MOUNT}
            - cryptpad-data:${BORG_VOLUMES}/cryptpad-data:${VOLUME_SYNC_MOUNT}
            - cryptpad-datastore:${BORG_VOLUMES}/cryptpad-datastore:${VOLUME_SYNC_MOUNT}

            # backup volumes according to:
            # https://github.com/mailcow/mailcow-dockerized/blob/master/helper-scripts/backup_and_restore.sh
            - vmail-vol-1:${BORG_VOLUMES}/vmail-vol-1:${VOLUME_SYNC_MOUNT}
            #- vmail-index-vol-1:${BORG_VOLUMES}/vmail-index-vol-1:${VOLUME_SYNC_MOUNT}
            - mysql-vol-1:${BORG_VOLUMES}/mysql-vol-1:${VOLUME_SYNC_MOUNT}
            #- mysql-socket-vol-1:${BORG_VOLUMES}/mysql-socket-vol-1:${VOLUME_SYNC_MOUNT}
            - redis-vol-1:${BORG_VOLUMES}/redis-vol-1:${VOLUME_SYNC_MOUNT}
            - rspamd-vol-1:${BORG_VOLUMES}/rspamd-vol-1:${VOLUME_SYNC_MOUNT}
            #- solr-vol-1:${BORG_VOLUMES}/solr-vol-1:${VOLUME_SYNC_MOUNT}
            - postfix-vol-1:${BORG_VOLUMES}/postfix-vol-1:${VOLUME_SYNC_MOUNT}
            - crypt-vol-1:${BORG_VOLUMES}/crypt-vol-1:${VOLUME_SYNC_MOUNT}
            #- sogo-web-vol-1:${BORG_VOLUMES}/sogo-web-vol-1:${VOLUME_SYNC_MOUNT}
            #- sogo-userdata-backup-vol-1:${BORG_VOLUMES}/sogo-userdata-backup-vol-1:${VOLUME_SYNC_MOUNT}
            #- xmpp-vol-1:${BORG_VOLUMES}/xmpp-vol-1:${VOLUME_SYNC_MOUNT}
            #- xmpp-upload-vol-1:${BORG_VOLUMES}/xmpp-upload-vol-1:${VOLUME_SYNC_MOUNT}

volumes:
    #
    # No Backup
    #
    www:
    www-dev:
    acme-challenge:
    syncthing-config:

    #
    # Backup
    #
    certs:
    letsencrypt-accounts:

    isso-db:

    cryptpad-blob:
    cryptpad-block:
    cryptpad-data:
    cryptpad-datastore:

    # Mailcow
    vmail-vol-1:
    vmail-index-vol-1:
    mysql-vol-1:
    mysql-socket-vol-1:
    redis-vol-1:
    rspamd-vol-1:
    solr-vol-1:
    postfix-vol-1:
    crypt-vol-1:
    sogo-web-vol-1:
    sogo-userdata-backup-vol-1:
    xmpp-vol-1:
    xmpp-upload-vol-1:

    #
    # Sync
    #
    volume-backup:
    backup:

networks:
    backbone:
#    mailcow-network:
